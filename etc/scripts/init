#!/usr/bin/env python3
# coding=utf-8

from __future__ import print_function
import argparse
import os
import shutil
from vendor.env import Environment
import socket
import subprocess
import logging

# Корень проекта
root_dir = os.path.abspath(os.path.join(__file__, "../../.."))
current_environment = None
# Директория с исходниками для env файлов
env_files_src_dir = root_dir + "/etc/env"
# Путь к результирующему env файлу
runtime_env_file = root_dir + "/.env"
# Директория в которой хранятся docker-compose файлы
docker_compose_files_dir = root_dir + "/etc/docker/compose"
# Логирование
FORMAT = '%(asctime)-15s %(levelname)s %(message)s'
logging.basicConfig(format=FORMAT)
logger = logging.getLogger('main')

def get_user_uid():
    return subprocess.check_output(['id', '-u']).strip().decode("utf-8")

def get_real_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    s.connect(("8.8.8.8", 80))

    real_ip = s.getsockname()[0]

    s.close()

    return real_ip


def get_secret_data():
    logger.debug("Извлекаю зашифрованные данные")

    secret_encrypted_file = "%s/etc/env/.env.%s.gpg" % (root_dir, current_environment.lower())
    secret_decrypted_file = "%s/runtime/env_secret" % root_dir

    cmd = "gpg --yes --quiet --decrypt '%s' > '%s'" % (secret_encrypted_file, secret_decrypted_file)

    logger.debug(cmd)

    proc = subprocess.Popen(cmd, shell=True)

    if proc.wait() != 0:
        raise Exception("Ошибка расшифровки файла")

    secret_data = Environment.read(secret_decrypted_file)

    os.remove(secret_decrypted_file)

    return secret_data


def copy_docker_compose_files():
    data = Environment.read(runtime_env_file)

    compose_override_file = data['COMPOSE_OVERRIDE_FILE']

    files_for_remove = [root_dir + '/docker-compose.yml', root_dir + '/docker-compose.override.yml']

    for file_for_remove in files_for_remove:
        if os.path.exists(file_for_remove):
            os.remove(file_for_remove)
            logger.debug("Удаляем файл файл: %s" % file_for_remove)

    common_docker_compose_file = docker_compose_files_dir + '/docker-compose.yml'
    logger.debug("Копирую общий docker-compose.yml файл: %s" % common_docker_compose_file)
    shutil.copy(common_docker_compose_file, root_dir + '/docker-compose.yml')

    if compose_override_file != 'NONE':
        override_docker_compose_file = docker_compose_files_dir + '/' + compose_override_file
        logger.debug("Копирую docker-compose.override.yml файл: %s" % override_docker_compose_file)
        shutil.copy(override_docker_compose_file, root_dir + '/docker-compose.override.yml')


def generate_runtime_env_file():
    # Данные для результирующего env файла
    result_env_data = {}

    # Сохраняем данные из общего файла окружения
    dist_env_file = os.path.join(env_files_src_dir, ".env.dist")
    if not os.path.isfile(dist_env_file):
        raise RuntimeError("Environment file " + dist_env_file + " not found")
    result_env_data.update(Environment.read(dist_env_file))

    # Сохраняем данные из основного файла окружения
    dist_env_file = os.path.join(env_files_src_dir, '.env.' + options.env.lower())
    if not os.path.isfile(dist_env_file):
        raise RuntimeError("Environment file " + dist_env_file + " not found")
    result_env_data.update(Environment.read(dist_env_file))

    # Сохраняем данные из секретного файла
    result_env_data.update(get_secret_data())

    # Указываем IP
    result_env_data['SERVER_REAL_IP'] = get_real_ip()

    # User UUID
    result_env_data['USER_UID'] = get_user_uid()

    # Перезаписываем переменные из environ
    env_vars_for_override = dict((key[5:], value) for key, value in os.environ.items() if key.startswith("INIT_"))
    result_env_data.update(env_vars_for_override)

    file_handler = open(runtime_env_file, 'w')
    for key, value in sorted(result_env_data.items()):
        print(key + "=" + value, file=file_handler)
    file_handler.close()


print("Initializing the Environments")
parser = argparse.ArgumentParser(
    description='''
        Инициализируем docker-compose и генерируем .env файл
    ''',
    formatter_class=argparse.RawTextHelpFormatter
)

parser.add_argument(
    '--env',
    default=Environment.LOCAL,
    help="Окружение приложения (По умолчанию: " + Environment.LOCAL + ") "
)

parser.add_argument(
    '--log-level',
    default='info',
    help="Уровень логирования. По умолчанию info",
    choices=['info', 'debug', 'warn']
)

options = parser.parse_args()

log_level = options.log_level

logger.setLevel(eval('logging.' + log_level.upper()))

current_environment = options.env
logger.info("Выбрано окружение: " + current_environment)

logger.info("Генерирую файл ./.env")
generate_runtime_env_file()

logger.info("Копирую docker-compose файл")
copy_docker_compose_files()
